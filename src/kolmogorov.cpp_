#include <Rcpp.h>
using namespace Rcpp;

#include <iostream>
#include <random>
#include <string>
#include <iterator>
#include <algorithm>

// This is a simple example of exporting a C++ function to R. You can
// source this function into an R session using the Rcpp::sourceCpp 
// function (or via the Source button on the editor toolbar). Learn
// more about Rcpp at:
//
//   http://www.rcpp.org/
//   http://adv-r.had.co.nz/Rcpp.html
//   http://gallery.rcpp.org/
//

void mMultiply(double *A,double *B,double *C,int m)
{ 
  int i,j,k; double s;
  for(i=0;i<m;i++) for(j=0; j<m; j++)
  {s=0.; for(k=0;k<m;k++) s+=A[i*m+k]*B[k*m+j]; C[i*m+j]=s;}
}

void mPower(double *A,int eA,double *V,int *eV,int m,int n)
{ 
  double *B;int eB,i;
  if(n==1) {for(i=0;i<m*m;i++) V[i]=A[i];*eV=eA; return;}
  mPower(A,eA,V,eV,m,n/2);
  B=(double*)malloc((m*m)*sizeof(double));
  mMultiply(V,V,B,m); eB=2*(*eV);
  if(n%2==0){for(i=0;i<m*m;i++) V[i]=B[i]; *eV=eB;}
  else {mMultiply(A,B,V,m); *eV=eA+eB;}
  if(V[(m/2)*m+(m/2)]>1e140) {for(i=0;i<m*m;i++) V[i]=V[i]*1e-140;*eV+=140;}
  free(B);
}

double K(int n,double d)
{ 
  int k,m,i,j,g,eH,eQ;
  double h,s,*H,*Q;
  //OMIT NEXT LINE IF YOU REQUIRE >7 DIGIT ACCURACY IN THE RIGHT TAIL
  s=d*d*n; if(s>7.24||(s>3.76&&n>99)) return 1-2*exp(-(2.000071+.331/sqrt((double) n)+1.409/n)*s);
  k=(int)(n*d)+1; m=2*k-1; h=k-n*d;
  H=(double*)malloc((m*m)*sizeof(double));
  Q=(double*)malloc((m*m)*sizeof(double));
  for(i=0;i<m;i++) for(j=0;j<m;j++)
    if(i-j+1<0) H[i*m+j]=0; else H[i*m+j]=1;
    for(i=0;i<m;i++) {H[i*m]-=pow(h,i+1); H[(m-1)*m+i]-=pow(h,(m-i));}
    H[(m-1)*m]+=(2*h-1>0?pow(2*h-1,m):0);
    for(i=0;i<m;i++) for(j=0;j<m;j++)
      if(i-j+1>0) for(g=1;g<=i-j+1;g++) H[i*m+j]/=g;
      eH=0; mPower(H,eH,Q,&eQ,m,n);
      s=Q[(k-1)*m+k-1];
      for(i=1;i<=n;i++) {s=s*i/n; if(s<1e-140) {s*=1e140; eQ-=140;}}
      s*=pow(10.,eQ); free(H); free(Q); return s;
}

// [[Rcpp::export]]
double ks_c (NumericVector sample1, NumericVector sample2) {
  
  // Based on https://github.com/tumi8/topas/blob/master/detectionmodules/statmodules/wkp-module/ks-test.cpp
  
  size_t n1, n2;
  unsigned int n_approx;

  float d;
  
  int D, Dmin, Dmax, s;
  
  NumericVector::iterator it1, it2;
  
  n1 = sample1.size();
  n2 = sample2.size();
  
  n_approx = (unsigned) ceil(float(n1*n2)/(n1+n2));
  
  sample1.sort();
  sample2.sort();
  
  D = 0; Dmin = 0; Dmax = 0;
  it1 = sample1.begin();
  it2 = sample2.begin();
  
  while ( (it1 != sample1.end()) && (it2 != sample2.end()) ) {
    
    if (*it1 == *it2) {
      
      s = *it1;

      do {
        D += n2;
        it1++;
      }
      while ( (*it1 == s) && (it1 != sample1.end()) );
      do {
        D -= n1;
        it2++;
      }
      while ( (*it2 == s) && (it2 != sample2.end()) );
      
      if (D > Dmax)
        Dmax = D;
      else if (D < Dmin)
        Dmin = D;
      
    }
    
    else if (*it1 < *it2) {
      
      // step in s_cdf_1, increase D by n2
      D += n2;
      it1++;
      
      if (D > Dmax)
        Dmax = D;
      
    }
    
    else {
      
      // step in F2, decrease D by n1
      D -= n1;
      it2++;
      
      if (D < Dmin)
        Dmin = D;
      
    }
    
  }
  
  // For two-sided test, take D = max (|Dmax|, |Dmin|) and compute
  // the value d of Kolmogorov's statistic (two-sided only)
  
  if (-Dmin > Dmax)
    D = -Dmin;
  else
    D = Dmax;
  
  // Hence the observed value of Kolmogorov's statistic:
  d = float(D)/(n1*n2);
  std::cout << "(" << n_approx << ", " << d << ")\n";
  float k_val = K(n_approx, d);
  std::cout << k_val << "\n";

  
  // Return p-value
  return 1 - K(n_approx, d);
  
}

// [[Rcpp::export]]
void get_kolmogorov_values (std::vector<int> ns, std::vector<float> alphas) {
  
  int i,j;
  double val;
  
  size_t num_n = ns.size();
  size_t num_alphas = alphas.size();
  
  for ( i = 0; i < num_n; i++){
    for ( j = 0; j < num_alphas; j++){
      val = K(ns[i], alphas[j]);
      printf("%.5f\t", val);
      
    }
    printf("\n");
  }
}

// [[Rcpp::export]]
void gen_kolmogorov_table (std::vector<int> ns, std::vector<float> alphas){
  
  double table_matrix [ns.size()][alphas.size()];
  get_kolmogorov_values(ns, alphas);
  
}


/*** R
N = 10000000

sample1 <- runif(N)
sample2 <- runif(N)

resR = ks.test(sample1, sample2, alternative = "greater")
resR

# D calculation gives the same result in Rcpp and R, table value calculation gives
# slight differences. We could check saving the table locally.

# func_R <- function(){
#   sample1 <- runif(N)
#   sample2 <- runif(N)
#   resR = ks.test(sample1, sample2)
# } 
# 
# func_C <- function(){
#   sample1 <- runif(N)
#   sample2 <- runif(N)
#   resC = ks_c(sample1, sample2)
# } 
# 
# library(microbenchmark)
# microbenchmark(func_R,
#                func_C,
#                times = 20)

#
# sample1 <- runif(N)
# sample2 <- runif(N)
# t1 <- Sys.time()
# res = ks.test(sample1, sample2)
# print(res)
# print(res$p.value)
# t2 <- Sys.time()
# print(t2-t1)
# t1 <- Sys.time()
# res = ks_c(sample1, sample2)
# print(res)
# t2 <- Sys.time()
# print(t2-t1)
# 
# ns = seq(1,3)
# alphas = c(0.001, 0.1, 0.2)
# 
# gen_kolmogorov_table(ns, alphas)

# NB <- 1000000
# sample1 <- runif(NB)
# length(sample1)
# 
# func_sample <- function() {
#   sample1_ <- sample(sample1, N, replace = FALSE)
# }
# 
# microbenchmark(func_sample,
#                times = 20)



*/
